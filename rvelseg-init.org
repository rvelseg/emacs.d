#+TITLE: rvelseg emacs init file
#+PROPERTY: header-args    :tangle yes :comments link
#+INFOJS_OPT: view:content toc:nil

* Personal information
  :PROPERTIES:
  :ID:       26f66db0-0185-4ecb-a4b8-a023302071bf
  :END:

#+begin_src emacs-lisp
  (setq user-full-name "Roberto Velasco Segura"
        user-mail-address "rdroberto@gmail.com")
#+end_src

** Sensible information
   :PROPERTIES:
   :ID:       2c6a7675-f29b-4e9f-9b32-9446142645d9
   :END:

Load only if the file is there. Sincie this init file is distributed without the sensible information, it is likely that this file is not readable.
#+begin_src emacs-lisp
  (let ((sesible-info-file "~/.emacs.d/secrets.el"))
    (if (file-readable-p sesible-info-file)
      (load sesible-info-file)
      (message "Sensible info not loaded. File not readable.")))
#+end_src

* First things first
  :PROPERTIES:
  :ID:       3f9b47e4-bc3a-4c1b-b093-ee44a929f944
  :END:
** Encoding
   :PROPERTIES:
   :ID:       292f09ab-b078-469c-aa17-b693fe0037a7
   :END:

 Use UTF-8 es the default, [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][ref]].
 #+begin_src emacs-lisp
 (prefer-coding-system 'utf-8)
 (set-default-coding-systems 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-keyboard-coding-system 'utf-8)
 ;; backwards compatibility as default-buffer-file-coding-system
 ;; is deprecated in 23.2.
 (if (boundp 'buffer-file-coding-system)
     (setq-default buffer-file-coding-system 'utf-8)
   (setq default-buffer-file-coding-system 'utf-8))
 ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
 (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
 #+end_src

** Packages
   :PROPERTIES:
   :ID:       cce011d1-cd2d-4757-a70d-f48456c9a0a2
   :END:

First, add the path to packages outside the repos. But from [[https://www.emacswiki.org/emacs/LoadPath][emacsWiki]]
#+BEGIN_QUOTE
Adding a directory to variable ‘load-path’ does not also add any of its descendants
#+END_QUOTE
then
#+begin_src emacs-lisp
(let ((default-directory  "~/.emacs.d/not_from_pm/"))
  (normal-top-level-add-subdirs-to-load-path))
#+end_src

Define repos
#+begin_src emacs-lisp
   (require 'package)
   (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                            ("marmalade" . "https://marmalade-repo.org/packages/")
                            ("melpa" . "http://melpa.milkbox.net/packages/")
                            ("org" . "http://orgmode.org/elpa/")))
#+end_src

And, initialize. This will also change the value of =load-path=, then it is good to have it at the beginning of the init file.
#+begin_src emacs-lisp
;;   (package-initialize)
#+end_src
I disabled this line because of the automatically added =(package-initialize)=, by emacs 25, at the begining of my =init.el=. It seems to be really important to run this at the very beginning of the init file.

QnD patch, the wrong version of org was been loaded
#+begin_src emacs-lisp
(org-reload)
(message (org-version))
#+end_src

** =customize= system
   :PROPERTIES:
   :ID:       443cc611-cfb0-48cc-9889-c41afc37eb5a
   :END:

 Use a separate file for the code automatically generated by =customize=
 #+begin_src emacs-lisp
   (setq custom-file (expand-file-name "customize.el" user-emacs-directory))
   (load custom-file)
 #+end_src

** Server
   :PROPERTIES:
   :ID:       e40f260c-ec38-4281-b3b7-e6c27506e6ac
   :END:

Start an emacs server if not already started, [[http://stackoverflow.com/questions/6397323][ref]]
#+begin_src emacs-lisp
  (require 'server)
  (or (server-running-p)
      (server-start))
#+end_src

* Global behavior
  :PROPERTIES:
  :ID:       34f4ad1f-25bd-4317-9883-6bf5a4fc4c49
  :END:

No explanations in scratch buffer, [[http://stackoverflow.com/questions/1498258][ref]].
#+begin_src emacs-lisp
  (setq initial-scratch-message ";; Scratch buffer")
#+end_src

No blinking
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src

No toolbar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

No splash screen
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
#+end_src

No menu bar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src

No scroll bars
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

Short answers y/n
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Numbers in lines and columns
#+begin_src emacs-lisp
  (setq column-number-mode t)
  (setq line-number-mode t)
#+end_src

Syntax highlighting
#+begin_src emacs-lisp
  (cond ((fboundp 'global-font-lock-mode)
         (global-font-lock-mode t)
         (setq font-lock-maximum-decoration t)))
#+end_src

Region highlighting
#+begin_src emacs-lisp
  (setq-default transient-mark-mode t)
#+end_src

Always end a file with a newline
#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

Stop at the end of the file, don't add new lines
#+begin_src emacs-lisp
  (setq next-line-add-newlines nil)
#+end_src

killing and yanking, friendly with external applications
#+begin_src emacs-lisp
  (global-set-key "\C-w" 'clipboard-kill-region)
  (global-set-key "\M-w" 'clipboard-kill-ring-save)
  (global-set-key "\C-y" 'clipboard-yank)
  ;; Cycling backwards through the kill-ring
  ;; http://emacswiki.org/emacs/KillingAndYanking
  (defun yank-pop-forwards (arg)
        (interactive "p")
        (yank-pop (- arg)))
  (global-set-key "\M-Y" 'yank-pop-forwards)
  ;; delete selection mode
  (delete-selection-mode 1)
#+end_src

Word completion with C-RET and M-RET, based in the previous words you typed
#+begin_src emacs-lisp
  (dynamic-completion-mode)
#+end_src

Enable some commands, disabled by default because they could be confusing
#+begin_src emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'scroll-left 'disabled nil)
#+end_src

Visible bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

Go home key binding
#+begin_src emacs-lisp
  (global-set-key (kbd "S-<f5>") (lambda
                                   ()
                                   (interactive)
                                   (dired "~")))
#+end_src

Highlight parens
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

Scroll buffer line by line
#+begin_src emacs-lisp
  ;; (fset 'custom-down-one-line
  ;;    "\C-u1\C-v")
  ;; (global-set-key (kbd "M-<down>") 'custom-down-one-line)
  ;; (fset 'custom-up-one-line
  ;;    "\C-u1\M-v")
  ;; (global-set-key (kbd "M-<up>") 'custom-up-one-line)
#+end_src
issues:
- collision with org mode move subtree, using smoth-scrolling instead.

Enable some commands disabled by default
#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
#+end_src
I acctually move here the code that emacs automatically writes in my =init.el= when I answer yes to the question to enable such commands.

** Unfill paragraph
   :PROPERTIES:
   :ID:       9ef9234c-8e55-4d7e-9861-42335fd931a8
   :END:

Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph.
#+begin_src emacs-lisp
  (defun unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))
  ;; Handy key definition
  (define-key global-map "\M-Q" 'unfill-paragraph)
#+end_src

* Shells
  :PROPERTIES:
  :ID:       4a1369d4-fb46-4cf4-a2b3-8eab0f7bc77d
  :END:

** Shell
   :PROPERTIES:
   :ID:       fe64f53f-a4df-4c74-8d96-547b724a53cc
   :END:

 #+begin_src emacs-lisp
 (defun clear-shell ()
    (interactive)
    (let ((old-max comint-buffer-maximum-size))
      (setq comint-buffer-maximum-size 0)
      (comint-truncate-buffer)
      (setq comint-buffer-maximum-size old-max)))
 #+end_src

* Gnowsys
  :PROPERTIES:
  :ID:       05970ab7-99d8-456a-8f0d-a87bfc8620b8
  :END:

One of these days I'm going to learn how to use this

Gnowsys mode?

* Images
  :PROPERTIES:
  :ID:       f968c9da-ebdb-446b-abba-bf820e8be96f
  :END:

http://vwood.github.io/emacs-images-in-buffer.html
#+begin_src emacs-lisp
(defun refresh-iimages ()
  "Only way I've found to refresh iimages (without also recentering)"
  (interactive)
  (clear-image-cache nil)
  (iimage-mode nil)
  (iimage-mode t))
;;
(add-to-list 'compilation-finish-functions
             (lambda (buffer msg)
	       (save-excursion
                 (set-buffer buffer)
                 (refresh-iimages))))
#+end_src

* pdf-tools
  :PROPERTIES:
  :ID:       632ac776-0c66-40f9-b0d6-96bf7b455ce4
  :END:

#+begin_src emacs-lisp
  (pdf-tools-install)
  (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
#+end_src
TODO: Update custom key binding in the way docview had it.

* CSV files
  :PROPERTIES:
  :ID:       df7c7690-41d8-4893-9a05-5a4b275849a2
  :END:

http://stackoverflow.com/questions/10616525
#+begin_src emacs-lisp
  (setq csv-separators '("," ";" "|" " "))
#+end_src

* Magit
  :PROPERTIES:
  :ID:       5cef8137-f5fc-4554-abe9-be18f55160a0
  :END:

In case is wanted to load the github based instance
#+begin_src emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/site-lisp/magit")
#+end_src

Key binding
#+begin_src emacs-lisp
  (global-set-key (kbd "S-<f3>") 'magit-status)
  (global-set-key (kbd "C-x v d") 'magit-status)
#+end_src

Highlight white space
#+begin_src emacs-lisp
  (setq smerge-refine-ignore-whitespace nil)
#+end_src

Highlight differences in hunks
#+begin_src emacs-lisp
  (setq magit-diff-refine-hunk 'all)
#+end_src

* Hyde
  :PROPERTIES:
  :ID:       bb8b34aa-b49e-4699-8d07-b6ba40f3eb57
  :END:

#+begin_src emacs-lisp
  (require 'hyde)
#+end_src

* hs
  :PROPERTIES:
  :ID:       15e8b704-adc1-463d-98f8-3febf95f86b3
  :END:

Hide/show
#+begin_src emacs-lisp
  (define-prefix-command 'my-hs-prefix)
  (global-set-key (kbd "C-c C-h") 'my-hs-prefix)
  (global-set-key (kbd "C-c C-h SPC") 'hs-toggle-hiding)
  (global-set-key (kbd "C-c C-h C-h") 'hs-hide-block)
  (global-set-key (kbd "C-c C-h C-s") 'hs-show-block)
  (global-set-key (kbd "C-c C-h C-l") 'hs-hide-level)
  (global-set-key (kbd "C-c C-h C-S-h") 'hs-hide-all)
  (global-set-key (kbd "C-c C-h C-S-s") 'hs-show-all)
  (global-set-key (kbd "C-c C-h C-a") 'hs-show-all)
  (global-set-key (kbd "C-c C-h C-c")  '(lambda () (interactive) (hs-hide-level 2)))
#+end_src

* Smartparens
  :PROPERTIES:
  :ID:       978354fe-23b2-4a3d-b56c-27f5ad03cfc1
  :END:

#+begin_src emacs-lisp
  (require 'smartparens-config)
#+end_src

* Auto upgrade
  :PROPERTIES:
  :ID:       6d99cdb4-e905-4c86-b44e-c1424814d4c8
  :END:

It seems like a good idea, but it has some issues:
- since packages are updated when emacs starts, and emacs should be restarted after package upgrade; then, I often have to start emacs twice, or more. If I forget, sometimes emacs have strange behaviors.
- Org installation depends on the status of emacs. The documentation says "Important: you need to do this [install] in a session where no .org file has been visited, i.e., where no Org built-in function have been loaded. Otherwise autoload Org functions will mess up the installation." Does other packages have this kind of problems?
Then, this is disabled.
#+begin_src emacs-lisp
  ;; (spu-package-upgrade-daily)
#+end_src

* Gitlab integration
  :PROPERTIES:
  :ID:       5b807027-44e1-42ad-8770-89b1382cf734
  :END:

#+begin_src emacs-lisp
  (require 'gitlab)
#+end_src

* History
  :PROPERTIES:
  :ID:       a39ca601-1a2e-428c-87f1-2be05bb630d3
  :END:

** Minibuffer
   :PROPERTIES:
   :ID:       fc813b13-852d-4832-b3d8-3f970dd3c165
   :END:

 #+begin_src emacs-lisp
   (setq savehist-file "~/.emacs.d/history/minibufer")
   (savehist-mode 1)
   (setq history-length t)
   (setq history-delete-duplicates t)
   (setq savehist-save-minibuffer-history 1)
   (setq savehist-additional-variables
         '(kill-ring search-ring
                     regexp-search-ring))
 #+end_src

** Tramp
   :PROPERTIES:
   :ID:       a5a5a670-f7a6-4e5c-a358-5672973bb0ba
   :END:
 #+begin_src emacs-lisp
   (setq tramp-persistency-file-name "~/.emacs.d/history/tramp")
 #+end_src

** Recent files
   :PROPERTIES:
   :ID:       b07996e0-3cde-4d5e-b168-dc40bab3863e
   :END:

If you are going change the =recentf-save-file=, do it before enabling the mode, [[https://www.reddit.com/r/emacs/comments/2bxmc5/recentf_overwriting_recentflist/][ref]].
There is a problem with tramp, it could slow down the startup, [[http://stackoverflow.com/questions/880625/stop-tramp-mode-running-on-emacs-startup][ref]].
 #+begin_src emacs-lisp
   (require 'recentf)
   (setq recentf-save-file "~/.emacs.d/history/recentf")   ;; custom list file location
   (setq recentf-auto-cleanup 'never)                      ;; patch for tramp at startup
   (run-at-time nil (* 5 60) 'recentf-save-list)           ;; save recent file list regularly
   (recentf-mode 1)                                        ;; activate
 #+end_src

** Backups
   :PROPERTIES:
   :ID:       3c612924-e1d3-4c61-8a30-24dc173a5d19
   :END:

 From Sacha Chua
 #+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/history/backups")))
  (setq delete-old-versions -1)      ;; Don't
  (setq version-control t)           ;; Number unlimited backups
  (setq vc-make-backup-files t)      ;; Do backups for VC registered files
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/history/auto-save-list/" t)))
  (setq auto-save-list-file-prefix "~/.emacs.d/history/auto-save-list/.saves-")
 #+end_src

** Persistent command history in comint shells
   :PROPERTIES:
   :ID:       0824c03b-b16b-47f6-9409-1e0fa1851d25
   :END:

https://oleksandrmanzyuk.wordpress.com/2011/10/23/a-persistent-command-history-in-emacs/
#+begin_src emacs-lisp
  (defun comint-write-history-on-exit (process event)
    (comint-write-input-ring)
    (let ((buf (process-buffer process)))
      (when (buffer-live-p buf)
	(with-current-buffer buf
          (insert (format "\nProcess %s %s" process event))))))
  ;;
  (defun turn-on-comint-history ()
    (let ((process (get-buffer-process (current-buffer))))
      (when process
	(setq comint-input-ring-file-name
              (format "~/.emacs.d/history/%s"
		      (replace-regexp-in-string "/" "%" (process-name process))
                      ))
	(comint-read-input-ring)
	(set-process-sentinel process
                              #'comint-write-history-on-exit))))
  ;;
  (add-hook 'inferior-python-mode-hook 'turn-on-comint-history)
  (add-hook 'kill-buffer-hook 'comint-write-input-ring)
  ;;
  (defun mapc-buffers (fn)
    (mapc (lambda (buffer)
            (with-current-buffer buffer
              (funcall fn)))
          (buffer-list)))
  ;;
  (defun comint-write-input-ring-all-buffers ()
    (mapc-buffers 'comint-write-input-ring))
  ;;
  (add-hook 'kill-emacs-hook 'comint-write-input-ring-all-buffers)
#+end_src

** Desktop mode
   :PROPERTIES:
   :ID:       58c6f1da-8fcc-44d0-a4e7-a4a70586a4d1
   :END:

By now, disabled. I find myself too often using =emacs --no-desktop= to have a fresh state depending only on the init file, and be able to debug it.
 #+begin_src emacs-lisp
   (desktop-save-mode -1)
   ;; there is a problem restoring tex files when using the whitespace mode
   (setq desktop-buffers-not-to-save
           (concat "\\("
                   "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
                   "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb|\\.tex"
                   "\\)$"))
 #+end_src

* Navigation
  :PROPERTIES:
  :ID:       79838bc5-4a25-4840-8a80-16a6a68f5287
  :END:
** helm
   :PROPERTIES:
   :ID:       38ccd95a-6a67-4862-9d91-037b9df36f65
   :END:

 Load
 #+begin_src emacs-lisp
   (require 'helm-config)
 #+end_src

 The default "C-x c" is quite close to "C-x C-c", which quits Emacs.  Changed to "C-c h". Note: We must set "C-c h" globally, because we cannot change `helm-command-prefix-key' once `helm-config' is loaded.
 #+begin_src emacs-lisp
   (global-set-key (kbd "C-c h") 'helm-command-prefix)
   (global-unset-key (kbd "C-x c"))
 #+end_src

 Map
 #+begin_src emacs-lisp
  (with-eval-after-load 'helm
    (define-key helm-map (kbd "C-c p") 'ignore)
    (define-key helm-map (kbd "<tab>") 'helm-select-action)
    (define-key helm-map (kbd "C-i")   'helm-execute-persistent-action)  ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")   'helm-select-action)              ; list actions using C-z
    (define-key helm-map (kbd "C-f")   'my-make-helm-full-frame)         ; Use the full frame
    )
 #+end_src

 Use =curl= if present
 #+begin_src emacs-lisp
   (when (executable-find "curl")
     (setq helm-google-suggest-use-curl-p t))
 #+end_src

 Use the full frame
 http://emacs.stackexchange.com/questions/643
 #+begin_src emacs-lisp
  (defun my-make-helm-full-frame ()
    (interactive)
    (with-selected-window (helm-window)
      (delete-other-windows)))
 #+end_src

 Options
 #+begin_src emacs-lisp
  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
	helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	helm-ff-file-name-history-use-recentf t
	helm-split-window-default-side        'left    ; Use the left side of the window
	)
 #+end_src

 Key bindings
 #+begin_src emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-c h h") 'helm-mini)
  (global-set-key (kbd "C-x C-r") 'helm-for-files)
 #+end_src

 Activate
 #+begin_src emacs-lisp
   (helm-mode 1)
 #+end_src

*** Descbindings
    :PROPERTIES:
    :ID:       25abdbac-1226-4395-8b64-1cccce3e8bb6
    :END:

 #+begin_src emacs-lisp
   (require 'helm-descbinds)
   (global-set-key (kbd "C-h b") 'helm-descbinds)
 #+end_src

*** Bibtex
    :PROPERTIES:
    :ID:       f783179a-6708-4220-bda2-d330628f03f0
    :END:

 Load
 #+begin_src emacs-lisp
   (autoload 'helm-bibtex "helm-bibtex" "" t)
 #+end_src

 Paths
 #+begin_src emacs-lisp
   (setq bibtex-completion-bibliography
	 '("~/personal/references/bib/references.bib"))
   (setq bibtex-completion-library-path
	 '("~/personal/references/pdf"))
   (setq bibtex-completion-notes-path "~/personal/references/notes")
 #+end_src

 External pdf viewer
 #+begin_src emacs-lisp
   (setq bibtex-completion-pdf-open-function
     (lambda (fpath)
       (call-process "okular" nil 0 nil fpath)))
 #+end_src

 pdf file field
 #+begin_src emacs-lisp
   (setq bibtex-completion-pdf-field "File")
 #+end_src

 Key bindings
 #+begin_src emacs-lisp
   (global-set-key (kbd "C-c h b") 'helm-bibtex)
 #+end_src

** Projectile
   :PROPERTIES:
   :ID:       69d5125a-f47e-48f0-89cb-bc895a753560
   :END:

 #+begin_src emacs-lisp
   (require 'projectile)
   (projectile-global-mode)
   (setq projectile-file-exists-remote-cache-expire nil)
   ;; (setq projectile-switch-project-action 'projectile-dired)
   ;; (persp-mode)
   ;; (require 'persp-projectile)
   ;; (define-key projectile-mode-map (kbd "s-s") 'projectile-persp-switch-project)
   (require 'helm-projectile)
   (helm-projectile-on)
 #+end_src

The following doesn't work. I don't know why, I loaded the key bindings with =helm-projectile-on= above.
#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-c p f") 'helm-projectile-find-file)
#+end_src

Switch between org and pdf files
#+begin_src emacs-lisp
  (add-to-list 'projectile-other-file-alist '("org" "pdf"))
  (add-to-list 'projectile-other-file-alist '("pdf" "org"))
#+end_src

Don't bookmark remote projects, from [[https://github.com/martinp/emacs.d][martinp]]
#+begin_src emacs-lisp
  (setq projectile-ignored-project-function 'file-remote-p)
#+end_src

** Neotree
   :PROPERTIES:
   :ID:       a771673c-c03e-406d-8f64-42de07df2d12
   :END:

 Key binding
 #+begin_src emacs-lisp
   (global-set-key (kbd "S-<f1>") 'neotree-toggle)
 #+end_src

** Dired
   :PROPERTIES:
   :ID:       474c2249-06b0-4d1d-a144-e8dd73b47e9c
   :END:

 Load extensions
 #+begin_src emacs-lisp
   (require 'dired-x)
   (require 'dired-k)
 #+end_src

 Human readable filesizes
 #+begin_src emacs-lisp
 (setq dired-listing-switches "-alh")
 #+end_src

 Hide hidden files, and details
 #+begin_src emacs-lisp
   (setq dired-omit-files "^\\...+$")
   (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))
   (add-hook 'dired-mode-hook 'dired-hide-details-mode)
 #+end_src

 Visit multiple files
 http://stackoverflow.com/questions/1110118/
 #+begin_src emacs-lisp
 (eval-after-load "dired"
   '(progn
      (define-key dired-mode-map "F" 'my-dired-find-file)
      (defun my-dired-find-file (&optional arg)
	"Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
	(interactive "P")
	(let* ((fn-list (dired-get-marked-files nil arg)))
          (mapc 'find-file fn-list)))))
 #+end_src

 Default shell commands, [[https://emacs.stackexchange.com/questions/3698][ref]]. This depends on =dired-x=. See =openwith= as well.
 #+begin_src emacs-lisp
   (setq dired-guess-shell-alist-user
         '(("\\.e?ps$" "okular" "evince")
           ("\\.chm$" "xchm")
           ("\\.docx?$" "libreoffice")
           ("\\.xslx?$" "libreoffice")
           ("\\.flv$" "mplayer" "totem")
           ("\\.mov$" "mplayer" "totem")
           ("\\.3gp$" "mplayer" "totem")
           ("\\.avi$" "mplayer" "totem")
           ("\\.png$" "eog")
           ("\\.jpg$" "eog")
           ("\\.JPG$" "eog")
           ("\\.pptx?$" "libreoffice")
           ("\\.rar$" "unrar x")
           ("\\.pdf$" "okular" "evince")
           ("\\.djvu$" "okular" "evince")))
 #+end_src
Issues:
- When in a remote server, using TRAMP
  - this commands doesn't behave in a DWIM way, the process is executed in the remote machine, and fails because of the lack of an X server through TRAMP. What I would like is that the command
  - if a process has been started with =!= or with =&=, even on a local file, the execution of other precesses (on remote systems) is locked, emacs gives you the option to kill the other processs, but not to create a new buffer with a new process.


 Create an empty file
 http://stackoverflow.com/questions/2592095
 #+begin_src emacs-lisp
 (eval-after-load 'dired
   '(progn
      (define-key dired-mode-map (kbd "_") 'my-dired-create-file)
      (defun my-dired-create-file (file)
	"Create a file called FILE.
 If FILE already exists, signal an error."
	(interactive
         (list (read-file-name "Create file: " (dired-current-directory))))
	(let* ((expanded (expand-file-name file))
               (try expanded)
               (dir (directory-file-name (file-name-directory expanded)))
               new)
          (if (file-exists-p expanded)
              (error "Cannot create file %s: file exists" expanded))
          ;; Find the topmost nonexistent parent dir (variable `new')
          (while (and try (not (file-exists-p try)) (not (equal new try)))
            (setq new try
                  try (directory-file-name (file-name-directory try))))
          (when (not (file-exists-p dir))
            (make-directory dir t))
          (write-region "" nil expanded t)
          (when new
            (dired-add-file new)
            (dired-move-to-filename))))))
 #+end_src

Act always recursively
#+begin_src emacs-lisp
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
#+end_src

 Key bindings.
 #+begin_src emacs-lisp
   (define-key dired-mode-map (kbd "K") 'dired-k)
   (global-set-key "\C-p" 'dired-jump)
 #+end_src
 Helm uses =C-l= to jump to parent dir, consider using this globaly.

** Openwith
   :PROPERTIES:
   :ID:       8c28b9ac-0301-4b7d-bc15-e3401ccb3394
   :END:

By now, load associations, but disabled by default.
#+begin_src emacs-lisp
  (when (require 'openwith nil 'noerror)
    (setq openwith-associations
          (list
           (list (openwith-make-extension-regexp
                  '("mpg" "mpeg" "mp3" "mp4"
                    "avi" "wmv" "wav" "mov" "flv"
                    "ogm" "ogg" "mkv"))
                 "vlc"
                 '(file))
           (list (openwith-make-extension-regexp
                  '("xbm" "pbm" "pgm" "ppm" "pnm"
                    "png" "gif" "bmp" "tif" "jpeg" "jpg"))
                 "eog"
                 '(file))
           (list (openwith-make-extension-regexp
                  '("odt" "ods" "odg" "odp"
                    "doc" "xls" "ppt"
                    "docx" "xlsx" "pptx"))
                 "libreoffice"
                 '(file))
           '("\\.lyx" "lyx" (file))
           '("\\.chm" "kchmviewer" (file))
           (list (openwith-make-extension-regexp
                  '("pdf" "ps" "ps.gz" "dvi"))
                 "okular"
                 '(file))
           ))
    (openwith-mode -1)) ;; Disabled by default
#+end_src
Issues:
- TODO: fix file paths when in dired over tramp.
- TODO: fix conflict of file copy/rename when using helm.
- TODO: disable for =org mode= files, it conflics particularly with =epresent=.

** Web browsing with eww
   :PROPERTIES:
   :ID:       7d93801a-5636-4ae6-abd1-9970096443bc
   :END:

Brake lines but not words.
#+begin_src emacs-lisp
   (add-hook 'eww-mode-hook 'visual-line-mode)
#+end_src

** Searching
  :PROPERTIES:
  :ID:       57533954-15e2-4492-96ac-ca79832d2bb5
  :END:

TODO: configure and use this
#+begin_src emacs-lisp
 ;; (require 'engine-mode)
 ;; (defengine mail "https://mail.google.com/mail/u/0/#search/%s" :keybinding "m")
 ;; (defengine google "http://google.com/search?q=%s" :keybinding "g")
 ;; (defengine emacswiki "http://google.com/search?q=site:emacswiki.org+%s" :keybinding "e")
#+end_src

** Windows
   :PROPERTIES:
   :ID:       ce32c096-2728-4b39-93ec-511e4307bd6b
   :END:

 Other window, conflicts with magit
 #+begin_src emacs-lisp
 (global-set-key (kbd "<C-tab>") 'other-window)
 (global-set-key (kbd "<C-iso-lefttab>") (lambda () (interactive) (other-window -1)))
 #+end_src

 Windows history
 #+begin_src emacs-lisp
 (winner-mode 1)
 #+end_src

** Tramp

Default method, ssh is faster than scp, [[https://www.emacswiki.org/emacs/TrampMode][ref]].
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

* Appeareance
  :PROPERTIES:
  :ID:       2e13bb68-c362-45cb-ba19-ef6fc1b962ac
  :END:
** Transparency
   :PROPERTIES:
   :ID:       7a53462d-00fe-4c6d-a36e-c3e7d1ce9351
   :END:

 #+begin_src emacs-lisp
   (set-frame-parameter (selected-frame) 'alpha '(85 85))
   (add-to-list 'default-frame-alist '(alpha . (85 . 85)))
   ;; http://pages.sachachua.com/.emacs.d/Sacha.html
   (defun sanityinc/adjust-opacity (frame incr)
     (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
            (newalpha (+ incr oldalpha)))
       (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
         (modify-frame-parameters frame (list (cons 'alpha newalpha))))))
   (global-set-key (kbd "M-C-8") (lambda () (interactive) (sanityinc/adjust-opacity nil -2)))
   (global-set-key (kbd "M-C-9") (lambda () (interactive) (sanityinc/adjust-opacity nil 2)))
   (global-set-key (kbd "M-C-0") (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))
 #+end_src
 TODO: fix a little conflict here, default values brake the interactive adjustment.

** Smart mode line
   :PROPERTIES:
   :ID:       99d68813-d3f9-4fea-8d5e-c45451f26272
   :END:

 #+begin_src emacs-lisp
   (require 'smart-mode-line)
   (setq sml/no-confirm-load-theme t)
   (setq sml/theme 'powerline)
   (sml/setup)
 #+end_src

** Global scale text
   :PROPERTIES:
   :ID:       73908c72-48c6-42e8-9741-0045f1bb36cb
   :END:

 http://www.emacswiki.org/emacs/GlobalTextScaleMode
 #+begin_src emacs-lisp
 (define-globalized-minor-mode
   global-text-scale-mode
   text-scale-mode
   (lambda () (text-scale-mode 1)))
 (defun global-text-scale-adjust (inc) (interactive)
	(text-scale-set 1)
	(kill-local-variable 'text-scale-mode-amount)
	(setq-default text-scale-mode-amount (+ text-scale-mode-amount inc))
	(global-text-scale-mode 1)
	)
 (global-set-key (kbd "M-0")
		 '(lambda () (interactive)
		    (global-text-scale-adjust (- text-scale-mode-amount))
		    (global-text-scale-mode -1)))
 (global-set-key (kbd "M-+")
		 '(lambda () (interactive) (global-text-scale-adjust 1)))
 (global-set-key (kbd "M--")
		 '(lambda () (interactive) (global-text-scale-adjust -1)))
 #+end_src

** Themes
   :PROPERTIES:
   :ID:       737998fb-adb7-4e01-9b67-ee5a9532895d
   :END:

*** Color themes
    :PROPERTIES:
    :ID:       53064315-5f42-4135-80ae-032d0029dfeb
    :END:

 Load
 #+begin_src emacs-lisp
   (require 'color-theme)
   (color-theme-initialize)
 #+end_src

*** Custom themes
    :PROPERTIES:
    :ID:       49c1a730-58fa-4a51-9ac4-60e9d701855a
    :END:

 Display theme in mode line, disabled
 #+begin_src emacs-lisp
   ;; (require 'display-theme)
   ;; (global-display-theme-mode)
 #+end_src

 http://www.tech-thoughts-blog.com/2013/08/

 issue: loading any theme without asking is not safe.

 issue: if you load a theme, it goes to the desktop record, you close emacs, and open a new frame. Then, the new frame hasn't the theme.

 Load random theme
 #+begin_src emacs-lisp
   (defun load-random-theme ()
     "Load any random theme from the available ones."
     (interactive)
     ;; disable any previously set theme
     (if (boundp 'theme-of-the-day)
         (progn
           (disable-theme theme-of-the-day)
           (makunbound 'theme-of-the-day)))
     (defvar themes-list (custom-available-themes))
     (defvar theme-of-the-day (nth (random (length themes-list))
                                   themes-list))
     (load-theme (princ theme-of-the-day) t)
     (my-set-default-font)
     ;; this function messes with the coding system, I don't know why,
     ;; this is a patch
     (prefer-coding-system 'utf-8)
     )
   (global-set-key (kbd "S-<f4>") 'load-random-theme)
 #+end_src

** Font
   :PROPERTIES:
   :ID:       8164a73c-fcad-4a81-af18-7c1e66dbd848
   :END:

 TODO: clean this
 #+begin_src emacs-lisp
   (set-default-font "-unknown-DejaVu Sans Mono-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")
 #+end_src

 A function and a key binding in case a custom theme doesn't behaves
 #+begin_src emacs-lisp
   (defun my-set-default-font ()
     (interactive)
     (set-default-font "-unknown-DejaVu Sans Mono-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1"))
   (global-set-key (kbd "S-<f2>") 'my-set-default-font)
 #+end_src

** White space
   :PROPERTIES:
   :ID:       7c17ee2b-b3fb-4bdd-977d-876104a43f6e
   :END:

 Remove white space for some modes
 #+begin_src emacs-lisp
 (add-hook 'c-mode-hook
	   (lambda () (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
 (add-hook 'cuda-mode-hook
	   (lambda () (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
 (add-hook 'sh-mode-hook
	   (lambda () (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
 (add-hook 'emacs-lisp-mode-hook
	   (lambda () (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
 #+end_src

*** Whitespace mode
    :PROPERTIES:
    :ID:       09c26ace-aade-4281-bd2f-2fee68127890
    :END:

 http://ergoemacs.org/emacs/whitespace-mode.html
 #+begin_src emacs-lisp
   (progn
     ;;  Make whitespace-mode with very basic background coloring for whitespaces.
     (setq whitespace-style (quote ( spaces tabs newline space-mark tab-mark newline-mark )))
     ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
     (setq whitespace-display-mappings
           ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
           '(
             (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
             (newline-mark 10 [182 10]) ; LINE FEED,
             (tab-mark 9 [9655 9] [92 9]) ; tab
             )))
 #+end_src

** Manual highlithing
   :PROPERTIES:
   :ID:       3bf2f5d1-2ea0-44ef-9274-fe0cac240f30
   :END:

 #+begin_src emacs-lisp
 (require 'highlight)
 #+end_src

** Window handling
   :PROPERTIES:
   :ID:       fc49d92f-324c-4886-9e3e-cc69eba06ed7
   :END:

 Resize
 #+begin_src emacs-lisp
 (global-set-key (kbd "C-<left>") 'shrink-window-horizontally)
 (global-set-key (kbd "C-<right>") 'enlarge-window-horizontally)
 (global-set-key (kbd "C-<down>") 'shrink-window)
 (global-set-key (kbd "C-<up>") 'enlarge-window)
 #+end_src

***  toggle windows split
    :PROPERTIES:
    :ID:       f7c306b7-0a1c-44ef-9cce-45effce5a6bb
    :END:
 http://www.emacswiki.org/emacs/ToggleWindowSplit
 #+begin_src emacs-lisp
   (defun toggle-window-split ()
     (interactive)
     (if (= (count-windows) 2)
         (let* ((this-win-buffer (window-buffer))
		(next-win-buffer (window-buffer (next-window)))
		(this-win-edges (window-edges (selected-window)))
		(next-win-edges (window-edges (next-window)))
		(this-win-2nd (not (and (<= (car this-win-edges)
                                            (car next-win-edges))
					(<= (cadr this-win-edges)
                                            (cadr next-win-edges)))))
		(splitter
                 (if (= (car this-win-edges)
			(car (window-edges (next-window))))
                     'split-window-horizontally
                   'split-window-vertically)))
           (delete-other-windows)
           (let ((first-win (selected-window)))
             (funcall splitter)
             (if this-win-2nd (other-window 1))
             (set-window-buffer (selected-window) this-win-buffer)
             (set-window-buffer (next-window) next-win-buffer)
             (select-window first-win)
             (if this-win-2nd (other-window 1))))))
   ;;
   (define-key ctl-x-4-map "t" 'toggle-window-split)
 #+end_src

** fullframe

#+begin_src emacs-lisp
  (require 'fullframe)
  (fullframe magit-status magit-mode-quit-window nil)
#+end_src

** Smoth scrolling

#+begin_src emacs-lisp
  (require 'smooth-scrolling)
  (smooth-scrolling-mode 1)
#+end_src

* Writing and coding
  :PROPERTIES:
  :ID:       5d4d411e-998c-4fb5-b0ba-20e5bd3152a1
  :END:
** LaTeX
   :PROPERTIES:
   :ID:       02853ef8-321f-43ca-a930-690e91a08f9a
   :END:

 Load
 #+begin_src emacs-lisp
   (load "auctex.el" nil t t)
 #+end_src

 Parsing, [[https://www.gnu.org/software/auctex/manual/auctex/Parsing-Files.html][ref]]. This generates the =auto= directory.
 #+begin_src emacs-lisp
   (setq TeX-parse-self t) ; Enable parse .tex files on load.
   (setq TeX-auto-save t) ; Enable parse .tex files on save (auto dir).
 #+end_src

 Reftex
 #+begin_src emacs-lisp
   (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
 #+end_src

 Math mode
 #+begin_src emacs-lisp
   (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
 #+end_src

 Fold mode
 #+begin_src emacs-lisp
   (add-hook 'LaTeX-mode-hook
             (lambda () (TeX-fold-mode 1)))
 #+end_src

 Flyspell
 #+begin_src emacs-lisp
 (add-hook 'LaTeX-mode-hook 'flyspell-mode)
 #+end_src

 Visual line mode
 #+begin_src emacs-lisp
 (add-hook 'LaTeX-mode-hook 'visual-line-mode)
 #+end_src

 Omit custom latex commands and environments in ispell
 http://tex.stackexchange.com/questions/117204
 #+begin_src emacs-lisp
 (setq ispell-tex-skip-alists
       (list
	(append
     (car ispell-tex-skip-alists)
     '(
       ("\\\\citep"       ispell-tex-arg-end)
       ("\\\\eqref"       ispell-tex-arg-end)
       ;; add as many lines like the previous two as you need before the "))"
       ))
	(append
     (cadr ispell-tex-skip-alists)
     '(
       ("align\\*?" . "\\\\end[      \n]*{[  \n]*align\\*?[  \n]*}")
       ;; add as many lines like the previous two as you need before the "))))"
       ))))
 #+end_src

 Integration with pdf-tools
 #+begin_src emacs-lisp
 (setq TeX-source-correlate-method 'SyncTeX)
 #+end_src

** C mode
   :PROPERTIES:
   :ID:       fe75b609-fe44-42b3-a6f4-adcdbe9289ca
   :END:

 #+begin_src emacs-lisp
 (c-set-offset 'case-label '+)
 #+end_src

** CUDA mode
   :PROPERTIES:
   :ID:       89891905-cbb1-46ee-965b-91b81117c8ea
   :END:

** org mode
   :PROPERTIES:
   :ID:       0a4e0695-6070-453e-b541-746c77e4633d
   :END:

Load
#+begin_src emacs-lisp
  (require 'org)
  (setq org-log-done t)
#+end_src

 Key bindings, TODO: clean this
 #+begin_src emacs-lisp
 (global-set-key "\C-cl" 'org-store-link)
 (global-set-key "\C-cc" 'org-capture)
 (global-set-key "\C-ca" 'org-agenda)
 (global-set-key "\C-cb" 'org-iswitchb)
 (defun my-bindkey-move-one-line ()
   "Override local key with the global key."
   (interactive)
   (local-set-key (kbd "M-<down>") 'custom-down-one-line)
   (local-set-key (kbd "M-<up>") 'custom-up-one-line)
   (local-set-key (kbd "<C-tab>") 'other-window))
 (add-hook 'org-mode-hook 'my-bindkey-move-one-line)
 #+end_src

 File extension association
 #+begin_src emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
 #+end_src
 This has trouble when file variables declare minor modes, like reftex.

 Personal org files, and capture
 #+begin_src emacs-lisp
 ;; notes and agenda directory
 (setq org-directory "~/personal/org/")
 ;; http://superuser.com/questions/635279
 (setq org-capture-templates
       (quote (("t" "todo" entry (file (concat org-directory "gtd.org"))
		"* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
	       ("b" "bibcard" entry (file (concat org-directory "bibcards.org"))
		"* \n%U\n%a\n#+BEGIN_QUOTE\n%?\n#+END_QUOTE")
               ("n" "note" entry (file (concat org-directory "gtd.org"))
		"* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
               ("j" "Journal" entry (file+datetree (concat org-directory "diary.org"))
		"* %?\n%U\n" :clock-in t :clock-resume t)
               )))
 #+end_src

 Create IDs, http://stackoverflow.com/questions/13340616/, the idea here is to be able to describe code issues in org files, and reference the issue descrition in the git commit messages.
 #+begin_src emacs-lisp
 (defun my/org-add-ids-to-headlines-in-file ()
   "Add ID properties to all headlines in the current file which
 do not already have one."
   (interactive)
   (org-map-entries 'org-id-get-create))
 (add-hook 'org-mode-hook
           (lambda ()
             (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))
 #+end_src

 Use IDs for links
 #+begin_src emacs-lisp
   (setq org-id-link-to-org-use-id t)
 #+end_src

 Template to insert lisp code
 #+begin_src emacs-lisp
   (add-to-list
    'org-structure-template-alist
    '("E" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>"))
 #+end_src

 Template to insert =artist-mode= pictures
 #+begin_src emacs-lisp
   (add-to-list
    'org-structure-template-alist
    '("z" "#+begin_src artist\n?\n#+end_src" "<div class=\"ascii-art\">\n?\n</div>"))
 #+end_src
TODO: insert buttons in =artist-mode=. To select different tools of the =artist-mode= by clicking on them.

 Visual line mode
 #+begin_src emacs-lisp
 (with-eval-after-load 'org
   (add-hook 'org-mode-hook 'visual-line-mode))
 #+end_src

Export with bibtex
#+begin_src emacs-lisp
 (require 'ox-bibtex)
#+end_src

Hide markup elements, [[http://stackoverflow.com/questions/10969617/hiding-markup-elements-in-org-mode][ref]].
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

Highlight code, [[http://stackoverflow.com/questions/17239273][ref]].
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-highlight-latex-and-related '(latex script entities))
#+end_src

** Text mode

   Visual line mode
   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'visual-line-mode)
   #+end_src

** Markdown mode
   :PROPERTIES:
   :ID:       cdec4fbd-282b-47e1-a98d-c9521f7576fa
   :END:
   :PROPERTIES:
   :ID:       1a91ff03-4836-42fe-9ad9-2abab8f17f5d
   :END:

 Extension association
 #+begin_src emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
 #+end_src

 Visual line mode
 #+begin_src emacs-lisp
   (add-hook 'markdown-mode-hook 'visual-line-mode)
 #+end_src

** octave

 File extension association
 #+begin_src emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
 #+end_src


* Drawing

** Artist mode

   File extension association
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.art\\'" . artist-mode))
   #+end_src
   This collides with an AOL image format, but I think it's not a big problem.
